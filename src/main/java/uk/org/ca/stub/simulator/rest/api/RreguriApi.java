/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually, unless you really, really have to.
 */
package uk.org.ca.stub.simulator.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import uk.org.ca.stub.simulator.rest.model.*;

import java.util.UUID;

import static uk.org.ca.stub.simulator.utils.Commons.APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE;

@Validated
@Tag(name = "manage-registered-peis", description = "The manage-registered-peis API")
public interface RreguriApi {

    @Operation(
            operationId = "deleteRegisteredPeisId",
            summary = "Delete a CDA registered resource",
            description = "Delete the resource identified by the resource id.",
            tags = { "manage-registered-peis" })
    @ApiResponses(
            value = {
                    @ApiResponse(responseCode = "204", description = "Deletion successful"),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "404", description = "Not Found"),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error"),
                    @ApiResponse(responseCode = "502", description = "Bad Gateway"),
                    @ApiResponse(responseCode = "503", description = "Service Unavailable"),
                    @ApiResponse(responseCode = "504", description = "Gateway Timeout")
            }
    )
    @DeleteMapping(
            path = "/rreguri/{resource_id}"
    )
    default ResponseEntity<Void> deleteRegisteredPeisId(
            @NotNull @Parameter(name = "X-Request-ID", description = "A unique correlation id", required = true, in = ParameterIn.HEADER)
            @RequestHeader(value = "X-Request-ID") UUID xRequestID,
            @NotNull
            @Parameter(name = "deletion_reason", description = "The reason that the PeI resource is being deleted.  `match-no` - a match-possible has previously been registered but found not to be a match.  `match-timeout` - a possible match has previously been registered but has since been removed eg if the pension owner did not confirm a match within the required time period.   `match-withdrawn` - an erroneous match was yes but has now been withdrawn.   `asset-removed` - a previously registered PeI has been removed eg benefit crystalised or transfered out ", required = true, in = ParameterIn.QUERY) @Valid
            @RequestParam(value = "deletion_reason") String deletionReason,
            @Parameter(name = "resource_id", description = "The unique registration id of the resource", required = true, in = ParameterIn.PATH)
            @PathVariable("resource_id") String resourceId,
            HttpServletRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(
            operationId = "getRegisteredPeisResourceId",
            summary = "Retrieve a CDA registered resource",
            description = "Retrieve the resource registered with the path resource_id.",
            tags = { "manage-registered-peis" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RegisteredPei.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "404", description = "Not Found"),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error"),
                    @ApiResponse(responseCode = "502", description = "Bad Gateway"),
                    @ApiResponse(responseCode = "503", description = "Service Unavailable"),
                    @ApiResponse(responseCode = "504", description = "Gateway Timeout")
            }
    )
    @GetMapping(
            path = "/rreguri/{resource_id}",
            produces = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE
    )

    default ResponseEntity<RegisteredPei> getRegisteredPeisResourceId(
            @NotNull @Parameter(name = "X-Request-ID", description = "A unique correlation id", required = true, in = ParameterIn.HEADER)
            @RequestHeader(value = "X-Request-ID") UUID xRequestID,
            @Parameter(name = "resource_id", description = "The unique registration id of the resource", required = true, in = ParameterIn.PATH)
            @PathVariable("resource_id") String resourceId,
            HttpServletRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(
            operationId = "patchRegisteredPeisId",
            summary = "Update a CDA registered resource",
            description = "Update the match status of a registered pei. If the match is determined to not be a match the registered-peis should be deleted.",
            tags = { "manage-registered-peis" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = PatchRegisteredPeisId200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "404", description = "Not Found"),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error"),
                    @ApiResponse(responseCode = "502", description = "Bad Gateway"),
                    @ApiResponse(responseCode = "503", description = "Service Unavailable"),
                    @ApiResponse(responseCode = "504", description = "Gateway Timeout")
            }
    )
    @PatchMapping(
            path = "/rreguri/{resource_id}",
            consumes = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE,
            produces = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE
    )

    default ResponseEntity<PatchRegisteredPeisId200Response> patchRegisteredPeisId(
            @NotNull @Parameter(name = "X-Request-ID", description = "A unique correlation id", required = true, in = ParameterIn.HEADER)
            @RequestHeader(value = "X-Request-ID") UUID xRequestID,
            @Parameter(name = "resource_id", description = "The unique registration id of the resource", required = true, in = ParameterIn.PATH)
            @PathVariable("resource_id") String resourceId,
            @Parameter(name = "RreguriResourceIdBody")
            @Valid @RequestBody RreguriResourceIdBody rreguriResourceIdBody,
            HttpServletRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @Operation(
            operationId = "postRegisteredPeis",
            summary = "Create a CDA registered resource.",
            description = "Register a new resource with the CDA. Used to register PeIs when a Pension Data provider identifies " +
                    "a new match in response to at find request.",
            tags = { "manage-registered-peis" },
            responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = PostRegisteredPeis201Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "409", description = "Conflict"),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error"),
                    @ApiResponse(responseCode = "502", description = "Bad Gateway"),
                    @ApiResponse(responseCode = "503", description = "Service Unavailable"),
                    @ApiResponse(responseCode = "504", description = "Gateway Timeout")
            }
    )
    @PostMapping(
            path = "/rreguri",
            consumes = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE,
            produces = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE
    )
    default ResponseEntity<PostRegisteredPeis201Response> postRegisteredPeis(
            @NotNull @Parameter(name = "X-Request-ID", description = "A unique correlation id", required = true, in = ParameterIn.HEADER)
            @RequestHeader(value = "X-Request-ID") UUID xRequestID,
            @Parameter(name = "RreguriBody", description = "")
            @Valid @RequestBody RreguriBody rreguriBody,
            HttpServletRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
