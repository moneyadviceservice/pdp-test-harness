/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually, unless you really, really have to.
 */
package uk.org.ca.stub.simulator.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import uk.org.ca.stub.simulator.rest.model.RetrieveUmaToken200Response;
import uk.org.ca.stub.simulator.rest.model.RetrieveUmaToken400Response;

import java.util.UUID;

import static uk.org.ca.stub.simulator.utils.Commons.APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE;

@Validated
@Tag(name = "retrieve-uma-tokens", description = "the retrieve-uma-tokens API")
public interface TokenApi {

    @Operation(
        operationId = "retrieveUmaToken",
        summary = "Retrieve an UMA access token",
        description = "Retrieve generated access tokens.",
        tags = { "retrieve-uma-tokens" } )
    @ApiResponses(
            value = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RetrieveUmaToken200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Example response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RetrieveUmaToken400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error"),
            @ApiResponse(responseCode = "502", description = "Bad Gateway"),
            @ApiResponse(responseCode = "503", description = "Service Unavailable"),
            @ApiResponse(responseCode = "504", description = "Gateway Timeout")
        }
    )
    @PostMapping(
        path = "/token",
        produces = APPLICATION_JSON_UTF8_VALUE_MEDIA_TYPE
    )
    default ResponseEntity<?> retrieveUmaToken(
        @NotNull @Size(min = 1) @Parameter(name = "grant_type", description = "The required grant type", required = true, in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "grant_type") String grantType,
        @NotNull @Parameter(name = "X-Request-ID", description = "A unique correlation id", required = true, in = ParameterIn.HEADER)
        @RequestHeader(value = "X-Request-ID") UUID xRequestID,
        @Pattern(regexp = "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+/=]*)") @Parameter(name = "ticket", description = "The most recent permission ticket received by the client (dashboard) as part of this authorization process. Permission ticket is a structured JWT.", in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "ticket", required = false) String ticket,
        @Pattern(regexp = "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+/=]*)") @Parameter(name = "claim_token", description = "A JWT claim token", in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "claim_token", required = false) String claimToken,
        @Parameter(name = "claim_token_format", description = "The type of the supplied claim token", in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "claim_token_format", required = false) String claimTokenFormat,
        @Pattern(regexp = "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+/=]*)") @Parameter(name = "assertion", description = "A JWT token ", in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "assertion", required = false) String assertion,
        @Parameter(name = "scope", description = "The scope of the required access", in = ParameterIn.QUERY) @Valid
        @RequestParam(value = "scope", required = false) String scope
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
